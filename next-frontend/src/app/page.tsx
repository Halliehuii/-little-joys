'use client'

import { useState } from 'react'
import { Camera, MapPin, Cloud, Upload } from 'lucide-react'

const HomePage = () => {
  const [formData, setFormData] = useState({
    content: '',
    author: '',
    image: null as File | null,
    location: '',
    weather: ''
  })

  const [charCount, setCharCount] = useState(0)
  const [authorCharCount, setAuthorCharCount] = useState(0)
  const [isUploading, setIsUploading] = useState(false)
  const [isGettingLocation, setIsGettingLocation] = useState(false)
  const [isGettingWeather, setIsGettingWeather] = useState(false)

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value
    if (value.length <= 100) {
      setFormData({ ...formData, content: value })
      setCharCount(value.length)
    }
  }

  const handleAuthorChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value
    if (value.length <= 30) {
      setFormData({ ...formData, author: value })
      setAuthorCharCount(value.length)
    }
  }

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      setFormData({ ...formData, image: file })
    }
  }

  const handleGetLocation = async () => {
    if (!navigator.geolocation) {
      alert('ÊÇ®ÁöÑÊµèËßàÂô®‰∏çÊîØÊåÅÂú∞ÁêÜ‰ΩçÁΩÆÂäüËÉΩ')
      return
    }

    console.log('üåç ÂºÄÂßãËé∑ÂèñÁî®Êà∑‰ΩçÁΩÆ...')
    console.log('üîç ÁéØÂ¢ÉÊ£ÄÊµã:')
    console.log('  - ÊµèËßàÂô®:', navigator.userAgent)
    console.log('  - ÊòØÂê¶ÊîØÊåÅGPS:', !!navigator.geolocation)
    console.log('  - ÊòØÂê¶HTTPS:', location.protocol === 'https:')
    console.log('  - ÂΩìÂâçÂüüÂêç:', location.hostname)
    console.log('  - ËøûÊé•Á±ªÂûã:', (navigator as any).connection?.effectiveType || 'Êú™Áü•')
    
    setIsGettingLocation(true)
    
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        try {
          const { latitude, longitude } = position.coords
          console.log(`üìç GPSÂùêÊ†áËé∑ÂèñÊàêÂäü: Á∫¨Â∫¶=${latitude}, ÁªèÂ∫¶=${longitude}`)
          console.log(`üìç ÂÆö‰ΩçÁ≤æÂ∫¶: ${position.coords.accuracy}Á±≥`)
          
          // ÊûÑÂª∫APIËØ∑Ê±ÇURL
          const apiUrl = `http://localhost:8000/api/v1/location/reverse-geocode?latitude=${latitude}&longitude=${longitude}&lang=zh-CN`
          console.log(`üîó ÂáÜÂ§áË∞ÉÁî®ÂêéÁ´ØAPI: ${apiUrl}`)
          
          // Ë∞ÉÁî®ÂêéÁ´ØAPIËøõË°åÂèçÂêëÂú∞ÁêÜÁºñÁ†Å
          const response = await fetch(apiUrl)
          console.log(`üì° APIÂìçÂ∫îÁä∂ÊÄÅ: ${response.status} ${response.statusText}`)
          
          if (!response.ok) {
            const errorText = await response.text()
            console.error('‚ùå APIËØ∑Ê±ÇÂ§±Ë¥•ËØ¶ÊÉÖ:', {
              status: response.status,
              statusText: response.statusText,
              errorText: errorText,
              url: apiUrl
            })
            
            throw new Error(`Âú∞ÁêÜÁºñÁ†ÅÊúçÂä°ËØ∑Ê±ÇÂ§±Ë¥•: ${response.status}`)
          }
          
          const data = await response.json()
          console.log('üìã APIËøîÂõûÁöÑÂÆåÊï¥Êï∞ÊçÆ:', JSON.stringify(data, null, 2))
          
          if (data.data && data.data.formatted_address) {
            console.log(`‚úÖ ÊàêÂäüËß£ÊûêÂú∞ÂùÄ: ${data.data.formatted_address}`)
            
            // Áõ¥Êé•‰ΩøÁî®APIËøîÂõûÁöÑÊ†ºÂºèÂåñÂú∞ÂùÄÔºåËøõË°åÂü∫Êú¨Ê∏ÖÁêÜ
            let cleanAddress = data.data.formatted_address
              .replace(/ÁæéÂà©ÂùöÂêà‰ºóÂõΩ\/ÁæéÂà©Â†ÖÂêàÁúæÂúã/g, 'ÁæéÂõΩ')
              .replace(/Á∫ΩÁ∫¶\/Á¥êÁ¥Ñ/g, 'Á∫ΩÁ∫¶')
              .replace(/Á∫ΩÁ∫¶Â∑û \/ Á¥êÁ¥ÑÂ∑û/g, 'Á∫ΩÁ∫¶Â∑û')
              .replace(/Ôºå/g, ', ')  // Áªü‰∏Ä‰ΩøÁî®Ëã±ÊñáÈÄóÂè∑ÂíåÁ©∫Ê†º
            
            console.log(`üßπ Âú∞ÂùÄÊ∏ÖÁêÜÂêé: ${cleanAddress}`)
            setFormData({ ...formData, location: cleanAddress })
          } else {
            console.error('‚ùå APIËøîÂõûÊï∞ÊçÆÊ†ºÂºèÂºÇÂ∏∏:', data)
            setFormData({ ...formData, location: '‰ΩçÁΩÆ‰ø°ÊÅØËß£ÊûêÂ§±Ë¥•' })
          }
        } catch (error) {
          console.error('‚ùå Ëé∑ÂèñÂú∞ÂùÄÂ§±Ë¥•:', error)
          setFormData({ ...formData, location: 'Âú∞ÂùÄËé∑ÂèñÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•' })
        } finally {
          setIsGettingLocation(false)
        }
      },
      (error) => {
        console.error('‚ùå GPSÂÆö‰ΩçÂ§±Ë¥•:', error)
        setIsGettingLocation(false)
        
        let errorMessage = '‰ΩçÁΩÆËé∑ÂèñÂ§±Ë¥•'
        let helpText = ''
        
        switch (error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = '‰ΩçÁΩÆÊùÉÈôêË¢´ÊãíÁªù'
            helpText = 'ËØ∑Âú®ÊµèËßàÂô®ÂºπÁ™ó‰∏≠ÁÇπÂáª"ÂÖÅËÆ∏"Êù•Ëé∑Âèñ‰ΩçÁΩÆÊùÉÈôê'
            break
          case error.POSITION_UNAVAILABLE:
            errorMessage = '‰ΩçÁΩÆ‰ø°ÊÅØ‰∏çÂèØÁî®'
            helpText = 'ËØ∑Á°Æ‰øùÊÇ®ÁöÑËÆæÂ§áÊîØÊåÅÂÆö‰ΩçÂäüËÉΩ'
            break
          case error.TIMEOUT:
            errorMessage = '‰ΩçÁΩÆËé∑ÂèñË∂ÖÊó∂'
            helpText = 'ÂÆö‰ΩçÊó∂Èó¥ËæÉÈïøÔºåÂèØËÉΩÊòØÁΩëÁªúÊàñÈò≤ÁÅ´Â¢ôÈóÆÈ¢ò„ÄÇÂª∫ËÆÆÁõ¥Êé•ÊâãÂä®ËæìÂÖ•‰ΩçÁΩÆÊõ¥Âø´'
            break
        }
        
        // Êèê‰æõÁî®Êà∑ÂèãÂ•ΩÁöÑÈîôËØØÂ§ÑÁêÜ
        const fullMessage = helpText 
          ? `${errorMessage}\n\nüí° ${helpText}\n\nËØ∑ÊâãÂä®ËæìÂÖ•ÊÇ®ÁöÑ‰ΩçÁΩÆ:`
          : `${errorMessage}\n\nËØ∑ÊâãÂä®ËæìÂÖ•ÊÇ®ÁöÑ‰ΩçÁΩÆ:`
        
        const manualLocation = prompt(fullMessage, '‰∏äÊµ∑Â∏Ç')
        
        if (manualLocation && manualLocation.trim()) {
          console.log(`‚úèÔ∏è Áî®Êà∑ÊâãÂä®ËæìÂÖ•‰ΩçÁΩÆ: ${manualLocation.trim()}`)
          setFormData({ ...formData, location: manualLocation.trim() })
        }
      },
      {
        enableHighAccuracy: false,  // ‰ΩøÁî®ÁΩëÁªúÂÆö‰ΩçÔºåÊõ¥Âø´Êõ¥Á®≥ÂÆö
        timeout: 30000,  // Â¢ûÂä†Âà∞30ÁßíË∂ÖÊó∂
        maximumAge: 300000  // 5ÂàÜÈíüÂÜÖÁöÑÁºìÂ≠ò‰ΩçÁΩÆÂèØÁî®ÔºåÂ¢ûÂä†ÁºìÂ≠òÊó∂Èó¥
      }
    )
  }

  const handleGetWeather = async () => {
    if (!navigator.geolocation) {
      alert('ÊÇ®ÁöÑÊµèËßàÂô®‰∏çÊîØÊåÅÂú∞ÁêÜ‰ΩçÁΩÆÂäüËÉΩÔºåÊó†Ê≥ïËé∑ÂèñÂ§©Ê∞î')
      return
    }

    setIsGettingWeather(true)
    
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        try {
          const { latitude, longitude } = position.coords
          
          // Ë∞ÉÁî®ÂêéÁ´ØAPIËé∑ÂèñÂ§©Ê∞î‰ø°ÊÅØ
          const response = await fetch(
            `http://localhost:8000/api/v1/weather/current?latitude=${latitude}&longitude=${longitude}&units=metric&lang=zh_cn`
          )
          
          if (!response.ok) {
            throw new Error('Â§©Ê∞îÊúçÂä°ËØ∑Ê±ÇÂ§±Ë¥•')
          }
          
          const data = await response.json()
          
          if (data.data) {
            const { temperature, weather } = data.data
            const weatherText = `${weather.description} ${Math.round(temperature.current)}¬∞C`
            setFormData({ ...formData, weather: weatherText })
          } else {
            setFormData({ ...formData, weather: 'Â§©Ê∞î‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•' })
          }
        } catch (error) {
          console.error('Ëé∑ÂèñÂ§©Ê∞îÂ§±Ë¥•:', error)
          // Â¶ÇÊûúAPIË∞ÉÁî®Â§±Ë¥•ÔºåÊèê‰æõ‰∏Ä‰∏™Âü∫‰∫é‰ΩçÁΩÆÁöÑÁÆÄÂçïÂ§©Ê∞î‰ø°ÊÅØ
          setFormData({ ...formData, weather: 'Â§©Ê∞îËé∑ÂèñÂ§±Ë¥•ÔºåËØ∑ÈáçËØï' })
        } finally {
          setIsGettingWeather(false)
        }
      },
      (error) => {
        console.error('Ëé∑Âèñ‰ΩçÁΩÆÂ§±Ë¥•:', error)
        setIsGettingWeather(false)
        
        let errorMessage = '‰ΩçÁΩÆËé∑ÂèñÂ§±Ë¥•ÔºåÊó†Ê≥ïËé∑ÂèñÂ§©Ê∞î'
        switch (error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = '‰ΩçÁΩÆÊùÉÈôêË¢´ÊãíÁªùÔºåËØ∑ÂÖÅËÆ∏‰ΩçÁΩÆËÆøÈóÆ‰ª•Ëé∑ÂèñÂ§©Ê∞î'
            break
          case error.POSITION_UNAVAILABLE:
            errorMessage = '‰ΩçÁΩÆ‰ø°ÊÅØ‰∏çÂèØÁî®ÔºåÊó†Ê≥ïËé∑ÂèñÂ§©Ê∞î'
            break
          case error.TIMEOUT:
            errorMessage = '‰ΩçÁΩÆËé∑ÂèñË∂ÖÊó∂ÔºåÊó†Ê≥ïËé∑ÂèñÂ§©Ê∞î'
            break
        }
        
        const manualWeather = prompt(
          `${errorMessage}\n\nËØ∑ÊâãÂä®ËæìÂÖ•Â§©Ê∞î‰ø°ÊÅØ:`, 
          'Êô¥Â§© 22¬∞C'
        )
        
        if (manualWeather && manualWeather.trim()) {
          console.log(`‚úèÔ∏è Áî®Êà∑ÊâãÂä®ËæìÂÖ•Â§©Ê∞î: ${manualWeather.trim()}`)
          setFormData({ ...formData, weather: manualWeather.trim() })
        }
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 300000 // 5ÂàÜÈíüÁºìÂ≠ò
      }
    )
  }

  const handleSubmit = async () => {
    if (!formData.content.trim()) {
      alert('ËØ∑ËæìÂÖ•Âπ∏Á¶èÂ∞è‰∫ãÂÜÖÂÆπ')
      return
    }

    setIsUploading(true)
    try {
      // ËøôÈáåÂèØ‰ª•Ë∞ÉÁî®ÂêéÁ´ØAPI‰∏ä‰º†Êï∞ÊçÆ
      console.log('Êèê‰∫§Êï∞ÊçÆ:', formData)
      alert('‰∏ä‰º†ÊàêÂäüÔºÅ')
      
      // ÈáçÁΩÆË°®Âçï
      setFormData({
        content: '',
        author: '',
        image: null,
        location: '',
        weather: ''
      })
      setCharCount(0)
      setAuthorCharCount(0)
    } catch (error) {
      console.error('‰∏ä‰º†Â§±Ë¥•:', error)
      alert('‰∏ä‰º†Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
    } finally {
      setIsUploading(false)
    }
  }

  const getCurrentDateTime = () => {
    const now = new Date()
    return `${now.getFullYear()}.${(now.getMonth() + 1).toString().padStart(2, '0')}.${now.getDate().toString().padStart(2, '0')} ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-journal-yellow via-journal-pink to-journal-light-pink p-4">
      <div className="max-w-7xl mx-auto">
        {/* ‰æßËæπÊ†è */}
        <div className="fixed left-4 top-4 space-y-4 z-10">
          <div className="bg-yellow-200 rounded-2xl shadow-lg p-4 w-20">
            <div className="space-y-6">
              {/* ‰∏ä‰º† */}
              <div className="flex flex-col items-center">
                <div className="w-12 h-12 bg-white rounded-lg flex items-center justify-center shadow-sm cursor-pointer hover:shadow-md transition-shadow">
                  <span className="text-2xl">üìù</span>
                </div>
                <span className="text-xs text-gray-700 mt-1 font-medium">‰∏ä‰º†</span>
              </div>
              
              {/* ÊêúÁ¥¢ */}
              <div className="flex flex-col items-center">
                <div className="w-12 h-12 bg-white rounded-lg flex items-center justify-center shadow-sm cursor-pointer hover:shadow-md transition-shadow">
                  <span className="text-2xl">üîç</span>
                </div>
                <span className="text-xs text-gray-700 mt-1 font-medium">ÊêúÁ¥¢</span>
              </div>
              
              {/* ÊàëÁöÑ */}
              <div className="flex flex-col items-center">
                <div className="w-12 h-12 bg-white rounded-lg flex items-center justify-center shadow-sm cursor-pointer hover:shadow-md transition-shadow">
                  <span className="text-2xl">üìÅ</span>
                </div>
                <span className="text-xs text-gray-700 mt-1 font-medium">ÊàëÁöÑ</span>
              </div>
            </div>
          </div>
        </div>

        <div className="max-w-2xl mx-auto">
          <div className="bg-white rounded-3xl shadow-xl overflow-hidden">
            <div className="bg-gradient-to-r from-pink-500 to-purple-600 text-white p-6 text-center">
              <h1 className="text-3xl font-bold mb-2">Âπ∏Á¶èÂ∞è‰∫ãÊó•ËÆ∞</h1>
              <p className="text-pink-100">ËÆ∞ÂΩïÊØè‰∏Ä‰∏™Ê∏©ÊöñÁöÑÁû¨Èó¥ üíï</p>
            </div>
          </div>
        </div>

        {/* ‰∏ªÊ†áÈ¢ò */}
        <div className="text-center mb-8 pt-4">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">
            <span className="text-black">Little </span>
            <span className="text-black">Âπ∏Á¶èÂ∞è‰∫ã</span>
            <span className="inline-block bg-red-500 text-white px-2 py-1 rounded ml-2 text-sm">üìÆ</span>
            <span className="text-black">Êó•ËÆ∞:</span>
          </h1>
          <p className="text-lg text-gray-600 italic">Joys Journal:</p>
        </div>

        <div className="flex gap-8 max-w-6xl mx-auto">
          {/* Â∑¶‰æßË°®ÂçïÂå∫Âüü */}
          <div className="flex-1 bg-white/80 rounded-2xl p-8 backdrop-blur-sm shadow-lg">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6 bg-gray-100 rounded-lg p-4 text-center">
              ÂÜô‰∏Ä‰ª∂Âπ∏Á¶èÂ∞è‰∫ã
            </h2>

            {/* ÊñáÂ≠óËæìÂÖ•Âå∫Âüü */}
            <div className="mb-6">
              <div className="relative">
                <textarea
                  value={formData.content}
                  onChange={handleContentChange}
                  placeholder="ËÆ∞ÂΩï‰∏ã‰Ω†ÁöÑÂπ∏Á¶èÁû¨Èó¥..."
                  className="w-full h-32 p-4 border-2 border-gray-200 rounded-lg resize-none focus:border-pink-300 focus:outline-none text-gray-700"
                />
                <div className="absolute bottom-2 right-4 text-sm text-gray-400">
                  {charCount}/100
                </div>
              </div>
            </div>

            {/* ÁΩ≤ÂêçÂå∫Âüü */}
            <div className="mb-6">
              <div className="flex items-center justify-between mb-2">
                <span className="text-gray-700 font-medium">ÁΩ≤Âêç</span>
              </div>
              <div className="relative">
                <input
                  type="text"
                  value={formData.author}
                  onChange={handleAuthorChange}
                  placeholder="ËØ∑ËæìÂÖ•"
                  className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-pink-300 focus:outline-none text-gray-700"
                />
                <div className="absolute bottom-2 right-4 text-sm text-gray-400">
                  {authorCharCount}/30
                </div>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-6">
              {/* ÂõæÁâá‰∏ä‰º†Âå∫Âüü */}
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-gray-700 font-medium">ÂõæÁâá</span>
                </div>
                <div className="relative">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    className="hidden"
                    id="image-upload"
                  />
                  <label
                    htmlFor="image-upload"
                    className="flex items-center justify-center w-full p-4 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-pink-300 transition-colors"
                  >
                    <div className="text-center">
                      {formData.image ? (
                        <span className="text-green-600">Â∑≤ÈÄâÊã©: {formData.image.name}</span>
                      ) : (
                        <>
                          <Camera className="w-6 h-6 text-gray-400 mx-auto mb-2" />
                          <span className="text-gray-400 text-sm">Êú™Ê∑ªÂä†ÂõæÁâá</span>
                        </>
                      )}
                    </div>
                  </label>
                  <button
                    onClick={() => document.getElementById('image-upload')?.click()}
                    className="absolute bottom-2 right-2 text-blue-500 text-sm hover:text-blue-700"
                  >
                    ÁÇπÂáª‰∏ä‰º†ÂõæÁâá
                  </button>
                </div>
              </div>

              {/* Â§©Ê∞îÂå∫Âüü */}
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-gray-700 font-medium">Â§©Ê∞î</span>
                </div>
                <div className="relative">
                  <div className="flex items-center justify-center w-full p-4 border-2 border-gray-200 rounded-lg">
                    <div className="text-center">
                      {formData.weather ? (
                        <span className="text-gray-700">{formData.weather}</span>
                      ) : (
                        <>
                          <Cloud className="w-6 h-6 text-gray-400 mx-auto mb-2" />
                          <span className="text-gray-400 text-sm">Êú™Ê∑ªÂä†Â§©Ê∞î</span>
                        </>
                      )}
                    </div>
                  </div>
                  <button
                    onClick={handleGetWeather}
                    disabled={isGettingWeather}
                    className="absolute bottom-2 right-2 text-blue-500 text-sm hover:text-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isGettingWeather ? 'Ëé∑Âèñ‰∏≠...' : 'ÁÇπÂáªËá™Âä®Ëé∑ÂèñÂ§©Ê∞î'}
                  </button>
                </div>
              </div>
            </div>

            {/* Âú∞ÁÇπÂå∫Âüü */}
            <div className="mt-6">
              <div className="flex items-center justify-between mb-2">
                <span className="text-gray-700 font-medium">Âú∞ÁÇπ</span>
              </div>
              <div className="relative">
                <div className="flex items-center justify-center w-full p-4 border-2 border-gray-200 rounded-lg">
                  <div className="text-center">
                    {formData.location ? (
                      <span className="text-gray-700">{formData.location}</span>
                    ) : (
                      <>
                        <MapPin className="w-6 h-6 text-gray-400 mx-auto mb-2" />
                        <span className="text-gray-400 text-sm">Êú™Ê∑ªÂä†Âú∞ÁÇπ</span>
                      </>
                    )}
                  </div>
                </div>
                <div className="flex space-x-2 mt-2">
                  <button
                    type="button"
                    onClick={handleGetLocation}
                    disabled={isGettingLocation}
                    className="px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50 text-sm w-full"
                  >
                    {isGettingLocation ? 'Ëé∑Âèñ‰∏≠...' : 'üìç Ëé∑ÂèñÂΩìÂâç‰ΩçÁΩÆ'}
                  </button>
                </div>
              </div>
              <p className="text-xs text-gray-500 mt-1">
                üí° ÁÇπÂáª"Ëé∑ÂèñÂΩìÂâç‰ΩçÁΩÆ"‰ºö‰ΩøÁî®‰Ω†ÁöÑÁúüÂÆûGPSÂùêÊ†áËøõË°åÂÆö‰Ωç
              </p>
            </div>

            {/* Á°ÆËÆ§‰∏ä‰º†ÊåâÈíÆ */}
            <div className="mt-8 text-center">
              <button
                onClick={handleSubmit}
                disabled={isUploading}
                className="bg-pink-500 hover:bg-pink-600 text-white font-semibold py-3 px-8 rounded-full transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2 mx-auto"
              >
                <Upload className="w-5 h-5" />
                <span>{isUploading ? '‰∏ä‰º†‰∏≠...' : 'Á°ÆËÆ§‰∏ä‰º†'}</span>
              </button>
            </div>
          </div>

          {/* Âè≥‰æßÈ¢ÑËßàÂå∫Âüü */}
          <div className="w-80 bg-white/60 rounded-2xl p-6 backdrop-blur-sm shadow-lg h-fit">
            <div className="text-center mb-4">
              <span className="text-gray-600 text-sm">‰Ω†ÁöÑÊó•ËÆ∞È¢ÑËßà</span>
            </div>
            
            <div className="bg-gray-100 rounded-lg p-4 mb-4">
              <div className="text-sm text-gray-500 mb-2">{getCurrentDateTime()}</div>
              <div className="text-gray-700 text-sm leading-relaxed">
                {formData.content || "‰∏ãÁè≠Êó∂Âú®Âú∞ÈìÅÂè£ÁúãÂà∞‰∫ÜÁà∂ËæàÁöÑËõãÂç∑Â§ßÂèîÔºå10ÂÖÉÁ´ãÂàªÊãø‰∏ã‰∏ÄÂåÖÔºå‰ªñ‰ªäÂ§©ÁöÑÈºªÂ≠êË¢´È£éÂêπÁöÑÁ∫¢Á∫¢ÁöÑ„ÄÇ"}
              </div>
            </div>

            <div className="text-right">
              <button className="bg-journal-purple text-white px-4 py-2 rounded-full text-sm hover:bg-purple-500 transition-colors">
                ÊãìÈ∫ªÊÖßÂ≠ê
              </button>
            </div>
          </div>
        </div>

        {/* Â∫ïÈÉ®ËÅîÁ≥ª‰ø°ÊÅØ */}
        <div className="mt-12 text-center text-sm text-gray-500">
          <div className="flex justify-between items-center max-w-6xl mx-auto">
            <span>ËÅîÁ≥ª</span>
            <span>Find Your Happy in the Little Things</span>
            <span>Joy Lives in the Details</span>
          </div>
        </div>
      </div>
    </div>
  )
}

export default HomePage 